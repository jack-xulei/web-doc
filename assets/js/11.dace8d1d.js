(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{365:function(e,o,a){"use strict";a.r(o);var t=a(45),r=Object(t.a)({},(function(){var e=this,o=e.$createElement,a=e._self._c||o;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器存储"}},[e._v("#")]),e._v(" 浏览器存储")]),e._v(" "),a("p",[e._v("我们常见且常用的存储方式主要由两种："),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Cookie",target:"_blank",rel:"noopener noreferrer"}},[e._v("cookie"),a("OutboundLink")],1),e._v("、"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("webStorage"),a("OutboundLink")],1),e._v("（localStorage和sessionStorage）。下面我们来一一认识它们")]),e._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),a("p",[e._v("首先我来说一下"),a("code",[e._v("cookie")]),e._v("，他的意思是小甜饼，顾名思义，"),a("code",[e._v("cookie")]),e._v(" 确实非常小，它的大小限制为"),a("code",[e._v("4KB")]),e._v("左右，是网景公司的一位员工在1993年3月的发明。它的主要用途是保存登录信息，比如你登录某个网站可以看到“记住密码”，这通常就是通过在 "),a("code",[e._v("Cookie")]),e._v(" 中存入一段识别用户身份的数据来实现的")]),e._v(" "),a("h3",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" localStorage")]),e._v(" "),a("p",[e._v("其次是"),a("code",[e._v("localStorage")]),e._v("，它是 "),a("code",[e._v("HTML5")]),e._v(" 标准中新加入的技术，它并不是什么划时代的新东西。早在 "),a("code",[e._v("IE 6")]),e._v(" 时代，就有一个叫 "),a("code",[e._v("userData")]),e._v(" 的东西用于本地存储，而当时考虑到浏览器的兼容性，更通用的方案是使用 "),a("code",[e._v("Flash")]),e._v("。而如今，"),a("code",[e._v("localStorage")]),e._v(" 已经被大多数浏览器所支持")]),e._v(" "),a("h3",{attrs:{id:"sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[e._v("#")]),e._v(" sessionStorage")]),e._v(" "),a("p",[e._v("它与 "),a("code",[e._v("localStorage")]),e._v(" 的接口类似，但保存数据的生命周期与 "),a("code",[e._v("localStorage")]),e._v(" 不同。我们都应该知道 "),a("code",[e._v("Session")]),e._v(" 这个词的意思，直译过来是“会话”。而 "),a("code",[e._v("sessionStorage")]),e._v(" 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，"),a("code",[e._v("sessionStorage")]),e._v(" 中的数据就会被清空")]),e._v(" "),a("h2",{attrs:{id:"相同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[e._v("#")]),e._v(" 相同点")]),e._v(" "),a("ul",[a("li",[e._v("都是key-value存储")]),e._v(" "),a("li",[e._v("都符合"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("同源策略"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),a("h3",{attrs:{id:"数据上的生命周期的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据上的生命周期的不同"}},[e._v("#")]),e._v(" 数据上的生命周期的不同")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("cookie")]),e._v(" 一般由服务器生成，可设置失效时间，如果在浏览器端生成cookie，默认是关闭后失效")]),e._v(" "),a("li",[a("strong",[e._v("localStorage")]),e._v(" 除非被永久清除，否则永久保存")]),e._v(" "),a("li",[a("strong",[e._v("sessionStorage")]),e._v(" 仅在当前会话会有效，关闭页面或浏览器后被清除")])]),e._v(" "),a("h3",{attrs:{id:"存放数据的大小不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存放数据的大小不同"}},[e._v("#")]),e._v(" 存放数据的大小不同")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("cookie")]),e._v(" 一般为4kb")]),e._v(" "),a("li",[a("strong",[e._v("localStorage")]),e._v(" 一般为5M")]),e._v(" "),a("li",[a("strong",[e._v("sessionStorage")]),e._v(" 一般为5M")])]),e._v(" "),a("h3",{attrs:{id:"与服务器端通信不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与服务器端通信不同"}},[e._v("#")]),e._v(" 与服务器端通信不同")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("cookie")]),e._v(" 每次都会携带HTTP头中，如果使用cookie保存过多数据会带来性能问题")]),e._v(" "),a("li",[a("strong",[e._v("localStorage和sessionStorage")]),e._v(" 仅在客户端（即浏览器）中保存，不参与和服务器的通信")])]),e._v(" "),a("h2",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[e._v("#")]),e._v(" 使用场景")]),e._v(" "),a("p",[e._v("因为考虑到每个 "),a("code",[e._v("HTTP")]),e._v(" 请求都会带着 "),a("code",[e._v("Cookie")]),e._v(" 的信息，所以 "),a("code",[e._v("Cookie")]),e._v(" 当然是能精简就精简！比较常用的一个应用场景就是判断用户是否登录。针对登录过的用户，服务器端会在他登录时往 "),a("code",[e._v("Cookie")]),e._v(" 中加入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。曾经还使用 "),a("code",[e._v("Cookie")]),e._v(" 来保存用户在电商网站的购物车信息，如今有了 "),a("code",[e._v("localStorage")]),e._v("，似乎它在这个方面便可以给 "),a("code",[e._v("Cookie")]),e._v(" 放个假了~\n而另一方面 "),a("code",[e._v("localStorage")]),e._v(" 接替了 "),a("code",[e._v("Cookie")]),e._v(" 管理购物车的工作，同时也能胜任其他一些工作。比如"),a("code",[e._v("HTML5")]),e._v("游戏通常会产生一些本地数据，"),a("code",[e._v("localStorage")]),e._v(" 则是非常适合做这个工作的。如果遇到一些内容特别多的表单，为了优化用户体验，我们可能要把表单页面拆分成多个子页面，然后按步骤引导用户填写。这时候 "),a("code",[e._v("sessionStorage")]),e._v(" 的作用就发挥出来了。")])])}),[],!1,null,null,null);o.default=r.exports}}]);